name: Deploy Infrastructure - Production Environment

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      confirm_production:
        description: 'Type "DEPLOY-TO-PRODUCTION" to confirm'
        required: true
        default: ''

env:
  AZURE_RESOURCE_GROUP: chinese-learning-prod
  AZURE_LOCATION: southeastasia

jobs:
  validate-production:
    name: Validate Production Deployment
    runs-on: ubuntu-latest
    
    steps:
    - name: Confirm Production Deployment
      if: github.event_name == 'workflow_dispatch'
      run: |
        if [ "${{ github.event.inputs.confirm_production }}" != "DEPLOY-TO-PRODUCTION" ]; then
          echo "‚ùå Production deployment not confirmed. Exiting."
          exit 1
        fi
        echo "‚úÖ Production deployment confirmed"
        
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Azure CLI
      uses: azure/setup-azure@v1
      with:
        version: 'latest'
        
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Install Bicep CLI
      run: az bicep install
      
    - name: Validate Production Template
      run: |
        echo "üîç Validating production template..."
        az deployment group validate \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --template-file infrastructure/main.bicep \
          --parameters infrastructure/parameters/prod.parameters.json \
          --parameters databaseAdminPassword="${{ secrets.DATABASE_ADMIN_PASSWORD_PROD }}" \
          --parameters jwtSecret="${{ secrets.JWT_SECRET_PROD }}" \
          --no-wait
        echo "‚úÖ Production template validation completed"

  deploy-production:
    name: Deploy to Production Environment
    runs-on: ubuntu-latest
    needs: validate-production
    environment: production
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Azure CLI
      uses: azure/setup-azure@v1
      with:
        version: 'latest'
        
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Install Bicep CLI
      run: az bicep install
      
    - name: Create Production Resource Group
      run: |
        echo "üì¶ Creating production resource group..."
        az group create \
          --name ${{ env.AZURE_RESOURCE_GROUP }} \
          --location ${{ env.AZURE_LOCATION }} \
          --tags Environment=Production Application=ChineseLearning Owner=MsHoa
        echo "‚úÖ Production resource group ready"
        
    - name: Deploy Production Infrastructure
      run: |
        echo "üöÄ Deploying infrastructure to production..."
        DEPLOYMENT_NAME="prod-deploy-$(date +%Y%m%d-%H%M%S)"
        
        az deployment group create \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --template-file infrastructure/main.bicep \
          --parameters infrastructure/parameters/prod.parameters.json \
          --parameters databaseAdminPassword="${{ secrets.DATABASE_ADMIN_PASSWORD_PROD }}" \
          --parameters jwtSecret="${{ secrets.JWT_SECRET_PROD }}" \
          --name "$DEPLOYMENT_NAME" \
          --verbose
          
        echo "DEPLOYMENT_NAME=$DEPLOYMENT_NAME" >> $GITHUB_ENV
        echo "‚úÖ Production infrastructure deployment completed"
        
    - name: Get Production Deployment Outputs
      run: |
        echo "üìã Getting production deployment outputs..."
        az deployment group show \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name "${{ env.DEPLOYMENT_NAME }}" \
          --query properties.outputs \
          --output table
        echo "‚úÖ Production deployment summary complete"

  verify-production:
    name: Verify Production Infrastructure
    runs-on: ubuntu-latest
    needs: deploy-production
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Verify Production Infrastructure
      run: |
        echo "üîç Verifying production infrastructure..."
        
        # Verify all resources exist
        echo "Checking Resource Group..."
        az group show --name ${{ env.AZURE_RESOURCE_GROUP }} --query name -o tsv
        
        echo "Checking Container Registry..."
        REGISTRY_NAME=$(az acr list --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "[0].name" -o tsv)
        echo "Registry: $REGISTRY_NAME"
        
        echo "Checking PostgreSQL Server..."
        POSTGRES_NAME=$(az postgres flexible-server list --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "[0].name" -o tsv)
        echo "PostgreSQL: $POSTGRES_NAME"
        
        echo "Checking Container App..."
        CONTAINER_APP_URL=$(az containerapp list --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "[0].properties.configuration.ingress.fqdn" -o tsv)
        echo "Container App URL: https://$CONTAINER_APP_URL"
        
        echo "Checking Static Web App..."
        STATIC_APP_URL=$(az staticwebapp list --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "[0].defaultHostname" -o tsv)
        echo "Static Web App URL: https://$STATIC_APP_URL"
        
        echo "‚úÖ Production infrastructure verification completed"
        
    - name: Create Deployment Summary
      run: |
        echo "üìã Creating deployment summary..."
        cat << EOF > deployment-summary.md
        # Production Deployment Summary
        
        **Date**: $(date)
        **Environment**: Production
        **Resource Group**: ${{ env.AZURE_RESOURCE_GROUP }}
        **Location**: ${{ env.AZURE_LOCATION }}
        
        ## Deployed Resources
        - ‚úÖ Container Registry
        - ‚úÖ PostgreSQL Flexible Server
        - ‚úÖ Container Apps Environment
        - ‚úÖ Container App
        - ‚úÖ Static Web App
        - ‚úÖ Storage Account
        - ‚úÖ Log Analytics Workspace
        
        ## Next Steps
        1. Configure DNS records if needed
        2. Update application configuration
        3. Deploy application code
        4. Run end-to-end tests
        
        EOF
        cat deployment-summary.md
