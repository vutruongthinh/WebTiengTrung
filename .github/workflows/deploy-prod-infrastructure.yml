name: Deploy Infrastructure - Production Environment

on:
  workflow_dispatch:
    inputs:
      confirm_production:
        description: 'Type "DEPLOY-TO-PRODUCTION" to confirm'
        required: true
        default: ''

env:
  AZURE_RESOURCE_GROUP: chinese-learning-prod
  AZURE_LOCATION: southeastasia

jobs:
  validate-production:
    name: Validate Production Deployment
    runs-on: ubuntu-latest
    
    steps:
    - name: Confirm Production Deployment
      run: |
        if [ "${{ github.event.inputs.confirm_production }}" != "DEPLOY-TO-PRODUCTION" ]; then
          echo "‚ùå Production deployment not confirmed. Exiting."
          exit 1
        fi
        echo "‚úÖ Production deployment confirmed"
        
    - name: Checkout repository
      uses: actions/checkout@v4
        
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Install Bicep CLI
      run: az bicep install
      
    - name: Validate Production Template
      run: |
        echo "üîç Validating production template..."
        az deployment group validate \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --template-file infrastructure/main.bicep \
          --parameters infrastructure/parameters/prod.parameters.json \
          --parameters databaseAdminPassword="${{ secrets.DATABASE_ADMIN_PASSWORD }}" \
          --parameters jwtSecret="${{ secrets.JWT_SECRET }}"
        echo "‚úÖ Production template validation completed"

  deploy-production:
    name: Deploy to Production Environment
    runs-on: ubuntu-latest
    needs: validate-production
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
        
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Install Bicep CLI
      run: az bicep install
      
    - name: Create Production Resource Group
      run: |
        echo "üì¶ Creating production resource group..."
        az group create \
          --name ${{ env.AZURE_RESOURCE_GROUP }} \
          --location ${{ env.AZURE_LOCATION }}
        echo "‚úÖ Production resource group ready"
        
    - name: Deploy Production Infrastructure
      run: |
        echo "üöÄ Deploying infrastructure to production environment..."
        DEPLOYMENT_NAME="prod-deploy-$(date +%Y%m%d-%H%M%S)"
        az deployment group create \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --template-file infrastructure/main.bicep \
          --parameters infrastructure/parameters/prod.parameters.json \
          --parameters databaseAdminPassword="${{ secrets.DATABASE_ADMIN_PASSWORD }}" \
          --parameters jwtSecret="${{ secrets.JWT_SECRET }}" \
          --name "$DEPLOYMENT_NAME" \
          --verbose
        echo "DEPLOYMENT_NAME=$DEPLOYMENT_NAME" >> $GITHUB_ENV
        echo "‚úÖ Production infrastructure deployment completed"
        
    - name: Get Production Deployment Outputs
      run: |
        echo "üìã Getting production deployment outputs..."
        az deployment group show \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name "${{ env.DEPLOYMENT_NAME }}" \
          --query properties.outputs \
          --output table
        echo "‚úÖ Production deployment summary complete"

  test-production:
    name: Test Production Infrastructure
    runs-on: ubuntu-latest
    needs: deploy-production
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Test Production Infrastructure Health
      run: |
        echo "üîç Testing production infrastructure health..."
        
        # Test Container Registry
        echo "Testing Container Registry..."
        REGISTRY=$(az acr list --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "[0].loginServer" -o tsv)
        echo "Container Registry: $REGISTRY"
        
        # Test PostgreSQL Server
        echo "Testing PostgreSQL Server..."
        POSTGRES=$(az postgres flexible-server list --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "[0].fullyQualifiedDomainName" -o tsv)
        echo "PostgreSQL Server: $POSTGRES"
        
        # Test Container App
        echo "Testing Container App..."
        CONTAINER_APP=$(az containerapp list --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "[0].properties.configuration.ingress.fqdn" -o tsv)
        echo "Container App: https://$CONTAINER_APP"
        
        # Test Static Web App
        echo "Testing Static Web App..."
        STATIC_APP=$(az staticwebapp list --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "[0].defaultHostname" -o tsv)
        echo "Static Web App: https://$STATIC_APP"
        
        echo "‚úÖ Production infrastructure health check completed"
